rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Role-based access control functions
    function hasRole(role) {
      return isSignedIn() && 
        (request.auth.token.role == role || 
         (request.auth.token.roles != null && role in request.auth.token.roles));
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isParent() {
      return hasRole('parent');
    }
    
    function isSchool() {
      return hasRole('school');
    }
    
    function isAuthority() {
      return hasRole('authority');
    }
    
    function isCommunity() {
      return hasRole('community');
    }
    
    // Relationship-based access control functions
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Support both guardians array and parentId field for backward compatibility
    function isParentOf(childData) {
      return isSignedIn() && (
        // New model: direct parentId
        (childData.parentId != null && request.auth.uid == childData.parentId) ||
        // Legacy model: guardians array
        (childData.guardians != null && request.auth.uid in childData.guardians)
      );
    }
    
    function isSchoolOf(childData) {
      return isSchool() && childData.schoolId != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId == childData.schoolId;
    }
    
    // Users collection - All dashboards need user access
    match /users/{userId} {
      // All authenticated users can read user profiles (needed for dashboard functionality)
      allow read: if isSignedIn();
      
      // Users can update their own profiles
      allow update: if isOwner(userId);
      
      // Only admins can create/delete users through client-side
      // Server-side Admin SDK bypasses these rules
      allow create, delete: if isAdmin();
    }
    
    // Children collection - Core entity for parent-child relationship
    match /children/{childId} {
      // Hybrid access control: role + relationship
      allow read: if isSignedIn() && (
        isAdmin() || 
        isAuthority() || 
        isParentOf(resource.data) ||
        isSchoolOf(resource.data)
      );
      
      // Parents and admins can create children
      allow create: if isSignedIn() && (isAdmin() || isParent());
      
      // Parents can update their own children, schools can update their students, admins can update any
      allow update: if isSignedIn() && (
        isAdmin() || 
        isParentOf(resource.data) ||
        isSchoolOf(resource.data)
      );
      
      // Parents can delete their own children, admins can delete any
      allow delete: if isSignedIn() && (
        isAdmin() || 
        isParentOf(resource.data)
      );
    }
    
    // Alerts collection - Critical for all dashboards
    match /alerts/{alertId} {
      // All authenticated users can read alerts (needed for dashboard functionality)
      allow read: if isSignedIn();
      
      // Parents, authorities, schools, and admins can create alerts
      allow create: if isSignedIn() && (isAdmin() || isParent() || isAuthority() || isSchool());
      
      // Alert creators, authorities, and admins can update alerts
      allow update: if isSignedIn() && (
        isAdmin() || 
        isAuthority() || 
        request.auth.uid == resource.data.createdBy ||
        (isParent() && resource.data.createdBy == request.auth.uid)
      );
      
      // Only admins and alert creators can delete alerts
      allow delete: if isSignedIn() && (
        isAdmin() || 
        request.auth.uid == resource.data.createdBy
      );
    }
    
    // Activities collection - For tracking user actions across dashboards
    match /activities/{activityId} {
      // Users can read their own activities, admins can read all
      allow read: if isSignedIn() && (
        isAdmin() || 
        request.auth.uid == resource.data.userId ||
        (isAuthority() && resource.data.type == 'alert')
      );
      
      // All authenticated users can create activities
      allow create: if isSignedIn();
      
      // Only admins can update/delete activities
      allow update, delete: if isAdmin();
    }
    
    // Resources collection - For parent and authority dashboards
    match /resources/{resourceId} {
      // All authenticated users can read resources
      allow read: if isSignedIn();
      
      // Admins and authorities can manage resources
      allow create, update, delete: if isSignedIn() && (isAdmin() || isAuthority());
    }
    
    // Settings collection - Application-wide settings
    match /settings/{settingId} {
      // All authenticated users can read settings
      allow read: if isSignedIn();
      
      // Only admins can modify settings
      allow write: if isAdmin();
    }
    
    // Schools collection - For school dashboard management
    match /schools/{schoolId} {
      // All authenticated users can read school information
      allow read: if isSignedIn();
      
      // Only admins can create schools
      allow create: if isAdmin();
      
      // Schools can update their own information, admins can update any
      allow update: if isSignedIn() && (
        isAdmin() || 
        (isSchool() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId == schoolId)
      );
      
      // Only admins can delete schools
      allow delete: if isAdmin();
    }
    
    // Authorities collection - For authority dashboard management
    match /authorities/{authorityId} {
      // All authenticated users can read authority information
      allow read: if isSignedIn();
      
      // Only admins can create authorities
      allow create: if isAdmin();
      
      // Authorities can update their own information, admins can update any
      allow update: if isSignedIn() && (
        isAdmin() || 
        (isAuthority() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.authorityId == authorityId)
      );
      
      // Only admins can delete authorities
      allow delete: if isAdmin();
    }
    
    // Cases collection - For authority dashboard
    match /cases/{caseId} {
      // Authorities and admins can read cases
      allow read: if isSignedIn() && (isAdmin() || isAuthority());
      
      // Authorities and admins can create cases
      allow create: if isSignedIn() && (isAdmin() || isAuthority());
      
      // Case creators and admins can update cases
      allow update: if isSignedIn() && (
        isAdmin() || 
        (isAuthority() && request.auth.uid == resource.data.createdBy)
      );
      
      // Only admins can delete cases
      allow delete: if isAdmin();
    }
    
    // Reports collection - For admin and authority dashboards
    match /reports/{reportId} {
      // Admins and authorities can read reports
      allow read: if isSignedIn() && (isAdmin() || isAuthority());
      
      // Admins and authorities can create reports
      allow create: if isSignedIn() && (isAdmin() || isAuthority());
      
      // Report creators and admins can update reports
      allow update: if isSignedIn() && (
        isAdmin() || 
        request.auth.uid == resource.data.createdBy
      );
      
      // Only admins can delete reports
      allow delete: if isAdmin();
    }
    
    // Audit logs collection - Admin only
    match /audit_logs/{logId} {
      // Only admins can read audit logs
      allow read: if isAdmin();
      
      // Only server-side writes allowed
      allow write: if false;
    }
  }
}